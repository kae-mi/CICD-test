name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker-image:    
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Show files for debug
      run: ls -al
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Spring Boot 어플리케이션 Build
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # Docker 이미지 Build
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test .
   
    # DockerHub Login
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 빌드된 도커 이미지를 Docker hub 로 push
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

  # 위 과정에서 푸시한 도커 이미지를 ec2에서 풀 받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image # 도커 이미지가 먼저 빌드되어 허브에 push되어야함
    runs-on: self-hosted # EC2처럼 Docker가 설치된 자체 호스팅 머신에서 실행

    steps:
    - name: docker image pull
      run : sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

    - name: docker stop container
      run: |
        if [ $(sudo docker ps -a -q -f name=spring-cicd-test) ]; then
          sudo docker stop spring-cicd-test
        fi

    - name: docker run new container
      run: sudo docker run --rm -it -d -p 80:8080 --name spring-cicd-test ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

    - name: delete old docker image
      run: sudo docker system prune -f

